from backend.blockchain.blockchain import Blockchain
from backend.wallet.transaction import Transaction

class TransactionPool:
    def __init__(self) -> None:
        self.transaction_map = {}

    def set_transaction(self, transaction: Transaction):
        """
        Set a transaction in the transaction pool

        Args:
            transaction (Transaction): incoming Transaction instance
        """
        self.transaction_map[transaction.id] = transaction

    def existing_transaction(self, address) -> Transaction:
        """
        Find a transaction generated by the address in the local transaction pool

        Args:
            address: Sender Wallet Address

        Returns:
            Transaction | None: If found returns the transaction instance in local pool
        """
        for transaction in self.transaction_map.values():
            if transaction.input['address'] == address:
                return transaction

    def transaction_data(self) -> list:
        """
        Returns:
            list: Transactions in transaction pool represented in JSON serialized form
        """
        return list(map(
                lambda transaction: transaction.to_json(), 
                self.transaction_map.values()
        ))

    def clear_blockchain_transactions(self, blockchain: Blockchain):
        """
        Remove blockchain recorded transactions, which are in mined blocks,
        from the transaction pool
            - Iterate through every single block in the blockchain to look
                for transactions in current map
        Args:
            blockchain (Blockchain): [description]
        """
        for block in blockchain.chain:
            for transaction in block.data:
                try:
                    del self.transaction_map[transaction['id']]
                except KeyError:
                    pass

